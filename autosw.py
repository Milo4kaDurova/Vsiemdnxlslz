# –ù–∞—Å—Ç—Ä–æ–µ—á–∫–∏

api_id = 
api_hash = ""
session_name = ""

bot_username = "@StartupWarsBot"
jarvis_username = "@SWTelecomBot"

squad_chat_id = "startupwarschat"

sw_bot_id = 227859379
sw_informator_id = 376592453
sw_battle_bot_id = 500004356

jarvis_id = 345393111

sw_bots = [sw_bot_id]
sw_informers = [sw_informator_id, sw_battle_bot_id]

battle_points = ["10:10:13", "13:07:34" ,"16:09:45", "19:10:13", "22:08:12"]

#--------------


from telethon import TelegramClient, events
import time
import re
from datetime import datetime
import random
import asyncio

client = TelegramClient(session_name, api_id, api_hash)

#
# –≤–µ–π–∫–∞–ø
#
@client.on(events.NewMessage(from_users=sw_bots, pattern=r"–û–ø–∞, —Ç–µ–±—è –Ω–∞—á–∞–ª –≥—Ä–∞–±–∏—Ç—å"))
async def rob_handler(event):
	print("rob_handler called")
	time.sleep(23 + random.randint(15,180))
	await event.click(0)

#
# –†–µ–ø–æ—Ä—Ç—ã –±–∏—Ç–≤
#

battle_handling = False

@client.on(events.NewMessage(from_users=sw_bots))
async def battle_report_handler(event):
	global battle_handling
	print(f"battle_report_handler called\n‚îî battle_handling={battle_handling}")
	if not battle_handling:
		return
		
	# send_read_acknowledge - —á–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
	# —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –≤–∏—Å–µ–ª–æ –≤ —É–≤–µ–º–¥–æ–ª–µ–Ω–∏—è—Ö
	if "–¢–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∏—Ç–≤–µ" in event.raw_text:
		await client.send_read_acknowledge(bot_username, event.message)
		time.sleep(1)
		await event.forward_to(jarvis_username)
		time.sleep(23 + random.randint(15,180))
		await client.send_message(bot_username, "/eat")
	
			
	if "–¢—ã —É—à—ë–ª –ø–æ–µ—Å—Ç—å, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–ª—ã." in event.raw_text:
		await client.send_read_acknowledge(bot_username, event.message)
	
	if "–ü–æ–µ–¥–∏–º –µ—â—ë?" in event.raw_text:
		await client.send_read_acknowledge(bot_username, event.message)
		battle_handling = False
		print("battle end")
	
		
#
# –ë–∏—Ç–≤—ã
#

# –ü–∏–Ω—ã
@client.on(events.NewMessage(chats=(squad_chat_id), from_users=sw_informers))
async def battle_pin_handler(event):
	print("battle_pin_handler called")
	if "‚öîÔ∏è–í –∞—Ç–∞–∫—É –Ω–∞" in event.raw_text:
		await event.click(0)

	if "üõ°–í—Å–µ –≤ –∑–∞—â–∏—Ç—É" in event.raw_text:
		await event.click(0)

# –ñ–∞—Ä–≤–∏—Å
@client.on(events.NewMessage(chats=(squad_chat_id), from_users=(jarvis_id)))
async def jarvis_stats_handler(event):
	print("jarvis_stats_handler called")
	if "–ì–æ—Ç–æ–≤—ã –∫ –±–∏—Ç–≤–µ:" in event.raw_text:
		await event.click(0)

#
# –û—Ç–ø—Ä–∞–≤–∫–∞ /battle –≤ –±–æ—Ç–∞ —Å–≤
# –ø–æ—Å–ª–µ –±–∏—Ç–≤
#
async def battle_job():
	global battle_handling
	print("battle started called")
	battle_handling = True
	await client.send_message(bot_username, "/battle")

#
# –∫–æ—Å—Ç—ã–ª—å, –∫–æ—Ç–æ—Ä—ã–π –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É —á–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è
# –∏ –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º, —Ç–æ
# –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–æ—Ç—É /battle
#
async def battle_timer():
	while True:
		clock = datetime.strftime(datetime.now(), "%H:%M:%S")
		if clock in battle_points:
			await asyncio.sleep(random.randint(15,180))
			await battle_job()
		await asyncio.sleep(1)

#
# —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
#
async def started():
	print("started called")
	me = await client.get_me()
	await client.send_message(me, "Bot started!")


#
# –ó–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ
#
client.start()
client.loop.run_until_complete(started())
client.loop.create_task(battle_timer())
client.run_until_disconnected()
